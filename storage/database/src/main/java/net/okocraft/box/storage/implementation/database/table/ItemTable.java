package net.okocraft.box.storage.implementation.database.table;

import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import it.unimi.dsi.fastutil.ints.IntSet;
import it.unimi.dsi.fastutil.objects.Object2IntMap;
import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
import net.okocraft.box.api.util.BoxLogger;
import net.okocraft.box.storage.api.model.item.CustomItemStorage;
import net.okocraft.box.storage.api.model.item.DefaultItemData;
import net.okocraft.box.storage.api.model.item.DefaultItemStorage;
import net.okocraft.box.storage.api.model.item.ItemData;
import net.okocraft.box.storage.api.model.item.NamedItem;
import net.okocraft.box.storage.api.util.SneakyThrow;
import net.okocraft.box.storage.implementation.database.database.Database;
import net.okocraft.box.storage.implementation.database.operator.CustomItemTableOperator;
import net.okocraft.box.storage.implementation.database.operator.ItemTableOperator;
import org.jetbrains.annotations.NotNull;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class ItemTable implements DefaultItemStorage {

    public static final int DEFAULT_ITEM_TYPE = 1;
    public static final int CUSTOM_ITEM_TYPE = 2;

    private final Database database;
    private final ItemTableOperator operator;
    private final CustomItemTable customItemTable;

    public ItemTable(@NotNull Database database) {
        this.database = database;
        this.operator = database.operators().itemTable();
        this.customItemTable = new CustomItemTable(database.operators().customItemTable());
    }

    public void init(@NotNull Connection connection) throws Exception {
        this.operator.initTable(connection);
        this.customItemTable.init(connection);
    }

    public @NotNull CustomItemStorage customItemStorage() {
        return this.customItemTable;
    }

    @Override
    public int newDefaultItemId(@NotNull String name) throws Exception {
        try (var connection = this.database.getConnection()) {
            return this.operator.insertAndGetAutoGeneratedId(connection, name, DEFAULT_ITEM_TYPE);
        }
    }

    @Override
    public @NotNull <I extends NamedItem<?>, R> List<R> initializeDefaultItems(@NotNull Stream<I> defaultItemStream, @NotNull BiFunction<I, Integer, R> function) throws Exception {
        List<R> result;

        try (var connection = this.database.getConnection()) {
            var counter = new AtomicInteger(0);

            try (var statement = this.operator.insertStatement(connection)) {
                result = defaultItemStream.map(item -> {
                    int id = counter.incrementAndGet();
                    try {
                        this.operator.addInsertBatch(statement, id, item.plainName(), DEFAULT_ITEM_TYPE);
                    } catch (SQLException e) {
                        SneakyThrow.sneaky(e);
                    }
                    return function.apply(item, id);
                }).toList();

                statement.executeBatch();
            }
        }

        return result;
    }

    @Override
    public @NotNull Object2IntMap<String> loadDefaultItemNameToIdMap() throws Exception {
        var result = new Object2IntOpenHashMap<String>();

        try (var connection = this.database.getConnection()) {
            this.operator.selectAll(connection, DEFAULT_ITEM_TYPE, (id, name) -> result.put(name, id.intValue()));
        }

        return result;
    }

    @Override
    public void removeItems(@NotNull IntSet itemIds) throws Exception {
        try (var connection = this.database.getConnection();
             var statement = this.operator.deleteItemStatement(connection)) {
            itemIds.forEach(itemId -> {
                try {
                    this.operator.addDeleteItemBatch(statement, itemId);
                } catch (SQLException e) {
                    SneakyThrow.sneaky(e);
                }
            });
            statement.executeBatch();
        }
    }

    @Override
    public void renameItems(@NotNull Int2ObjectMap<String> idToNewNameMap) throws Exception {
        try (var connection = this.database.getConnection()) {
            for (var entry : idToNewNameMap.int2ObjectEntrySet()) {
                this.operator.updateItemName(connection, entry.getIntKey(), entry.getValue());
            }
        }
    }

    @Override
    public void saveDefaultItems(@NotNull List<DefaultItemData> items) throws Exception {
        try (var connection = this.database.getConnection()) {
            try (var statement = this.operator.insertStatement(connection)) {
                for (var item : items) {
                    this.operator.addInsertBatch(statement, item.itemId(), item.plainName(), DEFAULT_ITEM_TYPE);
                }
                statement.executeBatch();
            }
        }
    }

    private class CustomItemTable implements CustomItemStorage {

        private final CustomItemTableOperator operator;

        private CustomItemTable(@NotNull CustomItemTableOperator operator) {
            this.operator = operator;
        }

        private void init(@NotNull Connection connection) throws SQLException {
            this.operator.initTable(connection);
        }

        @Override
        public void loadItemData(@NotNull Consumer<ItemData> dataConsumer) throws Exception {
            try (var connection = ItemTable.this.database.getConnection()) {
                ItemTable.this.operator.selectAll(connection, CUSTOM_ITEM_TYPE, (id, name) -> {
                    try {
                        var data = this.operator.selectItemData(connection, id);

                        if (data.isPresent()) {
                            dataConsumer.accept(new ItemData(id, name, data.get()));
                        } else {
                            BoxLogger.logger().error("Could not find custom item data (id: {}, name: {}), ignoring...", id, name);
                        }
                    } catch (SQLException e) {
                        SneakyThrow.sneaky(e);
                    }
                });
            }
        }

        @Override
        public void updateItemData(@NotNull Stream<ItemData> items) throws Exception {
            try (var connection = ItemTable.this.database.getConnection();
                 var statement = this.operator.updateStatement(connection)) {
                items.forEach(data -> {
                    try {
                        this.operator.addUpdateBatch(statement, data.internalId(), data.itemData());
                    } catch (SQLException e) {
                        SneakyThrow.sneaky(e);
                    }
                });
            }
        }

        @Override
        public int newCustomItem(@NotNull String name, byte[] data) throws Exception {
            try (var connection = ItemTable.this.database.getConnection()) {
                int id = ItemTable.this.operator.insertAndGetAutoGeneratedId(connection, name, CUSTOM_ITEM_TYPE);
                this.operator.insert(connection, id, data);
                return id;
            }
        }

        @Override
        public void renameCustomItem(int id, @NotNull String newName) throws Exception {
            try (var connection = ItemTable.this.database.getConnection()) {
                ItemTable.this.operator.updateItemName(connection, id, newName);
            }
        }

        @Override
        public void saveCustomItems(@NotNull List<ItemData> customItems) throws Exception {
            try (var connection = ItemTable.this.database.getConnection();
                 var itemTableInsertStatement = ItemTable.this.operator.insertStatement(connection);
                 var customItemTableInsertStatement = this.operator.insertStatement(connection)) {
                for (var item : customItems) {
                    ItemTable.this.operator.addInsertBatch(itemTableInsertStatement, item.internalId(), item.plainName(), CUSTOM_ITEM_TYPE);
                    this.operator.addInsertBatch(customItemTableInsertStatement, item.internalId(), item.itemData());
                }
                itemTableInsertStatement.executeBatch();
                customItemTableInsertStatement.executeBatch();
            }
        }
    }
}

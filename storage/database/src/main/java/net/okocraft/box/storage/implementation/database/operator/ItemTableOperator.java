package net.okocraft.box.storage.implementation.database.operator;

import org.jetbrains.annotations.NotNull;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.function.BiConsumer;

public class ItemTableOperator {

    private final String createTableStatement;
    private final String insertStatement;
    private final String idSpecifiedInsertStatement;
    private final String selectAllStatement;
    private final String updateItemNameStatement;
    private final String deleteItemStatement;

    public ItemTableOperator(@NotNull String tablePrefix) {
        var tableName = tablePrefix + "items";

        this.createTableStatement = """
            CREATE TABLE IF NOT EXISTS `%s` (
              `id` INTEGER PRIMARY KEY AUTOINCREMENT,
              `name` VARCHAR(50) NOT NULL,
              `type` INTEGER NOT NULL
            )
            """.formatted(tableName);

        this.insertStatement = "INSERT INTO `%s` (`name`, `type`) VALUES(?,?)".formatted(tableName);
        this.idSpecifiedInsertStatement = "INSERT INTO `%s` (`id`, `name`, `type`) VALUES(?,?,?)".formatted(tableName);
        this.selectAllStatement = "SELECT `id`, `name` FROM `%s` WHERE `type`=?".formatted(tableName);
        this.updateItemNameStatement = "UPDATE `%s` SET name=? WHERE `id`=?".formatted(tableName);
        this.deleteItemStatement = "DELETE FROM `%s` WHERE `id`=?".formatted(tableName);
    }

    public void initTable(@NotNull Connection connection) throws SQLException {
        try (var statement = connection.createStatement()) {
            statement.execute(this.createTableStatement);
        }
    }

    public void insert(@NotNull Connection connection, @NotNull String itemName, int type) throws SQLException {
        try (var statement = connection.prepareStatement(this.insertStatement)) {
            statement.setString(1, itemName);
            statement.setInt(2, type);
            statement.executeUpdate();
        }
    }

    public @NotNull PreparedStatement insertStatement(@NotNull Connection connection) throws SQLException {
        return connection.prepareStatement(this.idSpecifiedInsertStatement);
    }

    public void addInsertBatch(@NotNull PreparedStatement statement, int id, @NotNull String itemName, int type) throws SQLException {
        statement.setInt(1, id);
        statement.setString(2, itemName);
        statement.setInt(3, type);
        statement.addBatch();
    }

    public int insertAndGetAutoGeneratedId(@NotNull Connection connection, @NotNull String itemName, int type) throws SQLException {
        try (var statement = connection.prepareStatement(this.insertStatement, PreparedStatement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, itemName);
            statement.setInt(2, type);

            if (statement.executeUpdate() == 1) {
                try (var resultSet = statement.getGeneratedKeys()) {
                    if (resultSet.next()) {
                        return resultSet.getInt(1);
                    }
                }
            }

            throw new SQLException("Could not get generated id. (item: " + itemName + ")");
        }
    }

    public void selectAll(@NotNull Connection connection, int type, @NotNull BiConsumer<Integer, String> consumer) throws SQLException {
        try (var statement = connection.prepareStatement(this.selectAllStatement)) {
            statement.setInt(1, type);

            try (var resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    consumer.accept(resultSet.getInt(1), resultSet.getString(2));
                }
            }
        }
    }

    public void updateItemName(@NotNull Connection connection, int id, @NotNull String newName) throws SQLException {
        try (var statement = connection.prepareStatement(this.updateItemNameStatement)) {
            statement.setString(1, newName);
            statement.setInt(2, id);
            statement.executeUpdate();
        }
    }

    public @NotNull PreparedStatement deleteItemStatement(@NotNull Connection connection) throws SQLException {
        return connection.prepareStatement(this.deleteItemStatement);
    }

    public void addDeleteItemBatch(@NotNull PreparedStatement statement, int id) throws SQLException {
        statement.setInt(1, id);
        statement.addBatch();
    }
}
